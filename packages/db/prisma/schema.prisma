generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                           @id @default(cuid())
  email                 String                           @unique
  name                  String?             
  emailVerified         DateTime?             
  password              String              
  image                 String?             
  teacher_status        Status                          @default(PENDING)
  role                  UserRole                        @default(TEACHER)
  lectures              Lecture[]                       // for ADMIN and HOD this will remain empty.
  signupRequests        SignupRequests[]                // for admin and hod    
  leavesRequested       LeaveRequest[]                  @relation("RequestedLeaves")  // for ADMIN and HOD
  leavesApproved        LeaveRequest[]                  @relation("ApprovedLeaves")   // for ADMIN and HOD
  replacementOffers     ReplacementOffer[]              @relation("OffersMade")      
}

model SignupRequests {
  id                    String                          @id @default(cuid())
  name                  String?     
  email                 String                          @unique
  teacherId             String
  teacher               User                            @relation(fields: [teacherId], references: [id])
}

model Lecture {
  id                   String                           @id @default(cuid())
  teacherId            String
  subject              String
  date                 DateTime
  startTime            DateTime
  endTime              DateTime
  room                 String?
  teacher              User                             @relation(fields: [teacherId], references: [id])
  leaveRequest         LeaveRequest?

  @@unique([teacherId, subject])
}


model LeaveRequest {
  id                   String                           @id @default(cuid())
  requesterId          String
  lectureId            String                           @unique
  approverId           String
  reason               String
  createdAt            DateTime                         @default(now()) 
  status               Status                           @default(PENDING) 
  offers               ReplacementOffer[]
  requester            User                             @relation("RequestedLeaves", references: [id], fields: [requesterId])
  approver             User?                            @relation("ApprovedLeaves", references: [id], fields: [approverId])
  lecture              Lecture                          @relation(fields: [lectureId], references: [id])
}

model ReplacementOffer {
  id                  String                            @id @default(cuid())
  offererId           String
  leaveRequestId      String
  createdAt           DateTime                          @default(now())
  status              Status                            @default(PENDING)
  offerer             User                              @relation("OffersMade", fields: [offererId], references: [id])
  leaveRequest        LeaveRequest                      @relation(fields: [leaveRequestId], references: [id])
}

model VerificationToken {
  id                  String                            @id @default(cuid())
  email               String
  token               String                            @unique
  expires             DateTime

  @@unique([email, token])
}

enum UserRole {
  HOD
  ADMIN
  TEACHER
}

enum Status {
  PENDING
  SUCCESS
  DENIED
}